Maybe TODO:
   - debug Holtz' failure in game 120 of local-tournament

Next match:
   - GOAL: beat Dvonner and Holtz consistently!
   - Make more effective use of available time (improve move estimation?)
     (Benchmark to make sure this really works better than current version!)

   - Possible evaluation function tweaks:
      - change weights of moves (3/4/5 e.g. to 2/4/6 e.g. to 1/1/1)
      - instead of returning (a - b), return 100*(a - b)/(a + b)
        (after all, the relative difference in moves is more imporant than
         the absolute difference)

Note on timing:
 - Codecup server seems to think I take more time than I thought I did!
   Difference seems to be <= 0.250s so I'll aim at using max. 4.75s for now.
   IMPORTANT: check results for next match too, to see what the maximum
   difference there is, and adjust the margin accordingly!

Later:
 - consider implementing NegaScout? (should work well with killer heuristic?)
 - remove `best' as dfs() parameter? (then, how to shuffle moves?)
 - remove `pass' as dfs() parameter? (are there positions where we benefit from it?)
 - test if current move representation is inefficient (ints instead of chars?)
 - change library functions so single moves are passed by value.
 - smarter move ordering: capture moves first, etc?
 - shuffle moves when depth >= 2 or so? (shuffling seemed to improve cut-offs)
 - make board hashing for TT more efficient
 - check hash table performance: how often do collisions occur?
   how full is the table when they happen?
 - optimize time budget for moves
 - implement MTD(f)?
 - validate all code!
 - consider auto-learning for evaluation parameters?
   See: http://www.littlegolem.net/jsp/forum/topic2.jsp?forum=30&topic=19
 - test against Rororobot and Jan's Program on littlegolem.net
 - reconsider tt replacement policy (replace if depth >= tt->depth only?)

Long time:
 - improve placement phase evaluation function
 - improve stacking phase evaluation function
 - improve move ordering heuristic:
    - to evaluate: take a random sample of positions, rank possible moves by
      value, and see which ones tend to be good?
 - benchmark code, find bottlenecks, fix them.

Test suite:
 - transposition table tests: check values for various positions with and
   without tt, and ensure their values are equal.
 - collect various positions; benchmark and validate player with different
   techniques enabled?

Note for after test competition 4:
 - Timing code has changed yet again. check if the online judge is still 70~90ms
   behind my expected time. If not, up the time limit to e.g. 4.95 or so.

For test competition 4:
  - better handling of 'exact' values; if these are stored in the tt, their
    depth should be considered infinite.
  - get rid of EXTERN nonsense? (also in compile.pl!) (benchmark if it helps)

For test competition 5:
  - negascout?
  - improve setup function (borrow for Dvonner?)

For test competition 6:
  - improve evaluation function (how?)

For final version:
  - change compile.pl to #define NDEBUG so assertions are not tested anymore?

Later:
 - see if we can override target/optimization options.
   GCC 4.4 supports #pragma GCC target/optimization and
   __attribute__((target())), maybe GCC 4.3 does, too?
 - include some benchmarks and run them on the Codecup server, tweaking various
   parameters?
 - include principal variation in AI result.

Maybe later:
 - represent moves as two ints (source, destination?)
    - then we could also linearize the fields of the board. requires stable
      board representation, though!
 - consider implementing NegaScout? (should work well with killer heuristic?)
 - consider implementing MTD(f)? (tricky with float values)
 - check hash table performance:
     - how often do collisions occur?
     - how full is the table when they happen?
     - reconsider replacement policy (current version may keep stale positions)
 - try to optimize time budget for moves
 - validate all code!
     - print it out, verify, add comments...
 - consider auto-learning for evaluation parameters?
   See: http://www.littlegolem.net/jsp/forum/topic2.jsp?forum=30&topic=19
   Note: this is what Dvonner did!
 - test against Rororobot on littlegolem.net

Overall:
 - improve placement phase evaluation function
 - improve stacking phase evaluation function
 - improve move ordering heuristic:
    - to evaluate: take a random sample of positions, rank possible moves by
      value, and see which ones tend to be good?

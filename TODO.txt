Note for after test competition 4:
  - Review only lost match: codecup/testcomp-4/102-1558-55523
    How does Abdessamad arrive at the winning cut-off move? Analyze in depth!

For test competition 6:
  - better handling of 'exact' values; if these are stored in the tt, their
    depth should be considered infinite.
  - improve setup function (borrow from Dvonner?)
  - further improve evaluation function (how?)
  - optimize time budgeting for moves

For final version:
  - hard-code parameters (like ai_use_pv and such)
  - add -DNDEBUG to submission.c

Later:
 - see if we can override target/optimization options.
   GCC 4.4 supports #pragma GCC target/optimization and
   __attribute__((target())), maybe GCC 4.3 does, too?
 - include some benchmarks and run them on the Codecup server, tweaking various
   parameters?

Maybe later:
 - try to maximize personal score rather than score difference, to maximize
   competition points in CodeCup? Tricky, because this is losing in a duel!
   It also makes the evaluation function semi-asymmetric (in that it depends on
   global knowledge of who we are trying to optimize for).
 - represent moves as two ints (source, destination?)
    - then we could also linearize the fields of the board. requires stable
      board representation, though!
 - check hash table performance:
     - how often do collisions occur?
     - how full is the table when they happen?
 - consider using double/cuckoo hashing for transposition table, so that all
   results can be stored? needs good benchmarking to figure out if this makes
   sense.
 - validate all code!
     - print it out, verify, add comments...
 - consider auto-learning for evaluation parameters?
   See: http://www.littlegolem.net/jsp/forum/topic2.jsp?forum=30&topic=19
   Note: it seems this is what Dvonner did!
 - test against Rororobot on littlegolem.net

Overall:
 - improve placement phase evaluation function
 - improve stacking phase evaluation function
 - improve move ordering heuristic:
    - to evaluate: take a random sample of positions, rank possible moves by
      value, and see which ones tend to be good?
 - optimize time budgeting for moves

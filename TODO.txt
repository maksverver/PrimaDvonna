For final version:
  - fancy-eval branch (which includes distance to Dvonns in evaluation function)
    - rebase to master, to benefit from linearized board and bugs fixed
    - try to get it to outperform mainline player
  - mainline: implement MTD(f)
  - mainline: optimize time budgeting for moves (how?)
  - mainline: performance optimizations:
    - Optional hard-code parameters (like ai_use_pv and weights?)
    - Makefile: add -DNDEBUG to submission.c
  - see if we can override target/optimization options.
    GCC 4.4 supports #pragma GCC target/optimization and
    __attribute__((target())), maybe GCC 4.3 does, too?

Maybe later:
 - check hash table performance:
     - how often do collisions occur?
     - how full is the table when they happen?
 - consider using double/cuckoo hashing for transposition table, so that all
   results can be stored? needs good benchmarking to figure out if this makes
   sense.
 - validate all code!
     - print it out, verify, add comments...
 - consider auto-learning for evaluation parameters?
   See: http://www.littlegolem.net/jsp/forum/topic2.jsp?forum=30&topic=19
   Note: it seems this is what Dvonner did!

Overall:
 - improve placement phase evaluation function
 - improve stacking phase evaluation function
 - improve move ordering heuristic:
    - to evaluate: take a random sample of positions, rank possible moves by
      value, and see which ones tend to be good?
 - optimize time budgeting for moves

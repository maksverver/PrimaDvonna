Debug dubious sequence:
	DAAAAAAADBAAAAAAAAHAAAAAAAATKHHABHAAOCBGAKWAAAAGAA
	[2.128s] 2.872s left for 15 moves; budget is 0.359s.
	[2.140s] nmove=7 depth=9 val=200 num_evaluated=198 (0.013s used)
	Increased search depth to 10.
	[2.153s] nmove=7 depth=10 val=0 num_evaluated=446 (0.025s used)
	Increased search depth to 11.
	[2.168s] nmove=7 depth=11 val=0 num_evaluated=571 (0.041s used)
	Increased search depth to 12.
	[2.184s] nmove=7 depth=12 val=0 num_evaluated=636 (0.057s used)
	--I2I4-->
	CAAAAAAADBAAAAAAAAAAAAAAAAATKHHABHAAOCNGAKWAAAAGAA
	<--G4C4--
	DAAAAAAADBAAAAAAAAAAAAAAAAATKHHAUHAAACNGAKWAAAAGAA
	[2.186s] 2.814s left for 13 moves; budget is 0.402s.
	[2.191s] nmove=6 depth=12 val=-500 num_evaluated=14 (0.005s used)
	Increased search depth to 13.



Soon (for testcompetition):
 - improve evaluation function for placing: stones with less then 3 open/opponent
   neighbours are bad! (leads to edge pieces which can only jump to own pieces)

Later:
 - test program to validate distance functions/
   fix distance function in Dvonn-tool and JavaScript game code!
 - allow transposition table/move reordering be enabled/disabled
   on the command line for easier testing
 - make board hashing for TT more efficient
 - optimize move reordering: currently I apply move reordering when depth >= 3,
   and subtract 2 from search depth compared to regular search. Maybe these
   values can be optimized/tweaked further.
 - optimize time budget for moves
 - implement MTD(f)
 - validate all code!

Long time:
 - improve evaluation functions for both algorithms

Test suite:
 - transposition table tests: check values for various positions with and
   without tt, and ensure their values are equal.

Later:
 - make TT and move ordering (runtime/compiletime?) optional
 - consider auto-learning for evaluation parameters?
   See:
   http://www.littlegolem.net/jsp/forum/topic2.jsp?forum=30&topic=19

Existing opponents:
  http://matztias.de/spiele/dvonner/dvonner-e.htm
  http://www.othello.nl/content/Dvonn.zip
  Holtz (open-source!)
